using System; using System.Reactive.Linq;  namespace ReactiveExample {     class Program     {         static void Main(string[] args)         {             IObservable<CountObject> observableOfCountToTen =                 Observable.Create<CountObject>(observer => CountToTen(observer));              observableOfCountToTen                .Subscribe(e => Console.WriteLine(e),                 err => Console.WriteLine(err.Message),                 () => Console.WriteLine("The subscription is completed"));              observableOfCountToTen.Where(e => e.CountableInt % 2 == 0)                .Subscribe(e =>  Console.WriteLine(e),                 err => Console.WriteLine(err.Message),                 () => Console.WriteLine("The subscription is completed"));         }          public class CountObject         {             public CountObject(int startvalue)             {                 CountableInt = startvalue;             }              public int CountableInt { get; private set; }              public void Increase()             {                 CountableInt++;                 //if (CountableInt == 4)                 //{                 //    throw new Exception("Number 4 is forbidden");                 //}             }              public override string ToString()             {                 return $"Current value is: { CountableInt }";             }         }          static IDisposable CountToTen(IObserver<CountObject> observer)         {             var observableObject = new CountObject(0);             while (observableObject.CountableInt < 10)             {                 observableObject.Increase();                 observer.OnNext(observableObject);             }             observer.OnCompleted();             return null;         }     } }